// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Player struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Position    Position `json:"position"`
	Nationality string   `json:"nationality"`
	Goals       *int     `json:"goals,omitempty"`
	Assists     *int     `json:"assists,omitempty"`
	Team        *Team    `json:"team,omitempty"`
}

type PlayerInput struct {
	Name        string   `json:"name"`
	Position    Position `json:"position"`
	Nationality string   `json:"nationality"`
	Goals       *int     `json:"goals,omitempty"`
	Assists     *int     `json:"assists,omitempty"`
	TeamName    TeamName `json:"teamName"`
	ID          *string  `json:"id,omitempty"`
}

type Team struct {
	ID      string    `json:"id"`
	Name    TeamName  `json:"name"`
	League  string    `json:"league"`
	Players []*Player `json:"players,omitempty"`
}

type UpsertPlayerResponse struct {
	// Similar to HTTP status code, represents the state of the mutation
	Code int `json:"code"`
	// Informs if the mutation completed successfully
	Success bool `json:"success"`
	// Explains what happened during the mutation
	Message string `json:"message"`
	// Returns the player who just had their goals increased
	Player *Player `json:"player,omitempty"`
}

type Position string

const (
	// Players typically responsible for generating attacks
	PositionForward Position = "FORWARD"
	// Players typically responsible for providing balance between attack and defense
	PositionMidfielder Position = "MIDFIELDER"
	// Players responsible for sheilding the goal
	PositionDefender Position = "DEFENDER"
	// Last line of defense, stands in goal and can use their hands
	PositionGoalie Position = "GOALIE"
)

var AllPosition = []Position{
	PositionForward,
	PositionMidfielder,
	PositionDefender,
	PositionGoalie,
}

func (e Position) IsValid() bool {
	switch e {
	case PositionForward, PositionMidfielder, PositionDefender, PositionGoalie:
		return true
	}
	return false
}

func (e Position) String() string {
	return string(e)
}

func (e *Position) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Position(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Position", str)
	}
	return nil
}

func (e Position) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TeamName string

const (
	TeamNameManchesterunited       TeamName = "MANCHESTERUNITED"
	TeamNameArsenal                TeamName = "ARSENAL"
	TeamNameChelsea                TeamName = "CHELSEA"
	TeamNameManchestercity         TeamName = "MANCHESTERCITY"
	TeamNameWestham                TeamName = "WESTHAM"
	TeamNameWolverhamptonwanderers TeamName = "WOLVERHAMPTONWANDERERS"
	TeamNameSpuds                  TeamName = "SPUDS"
	TeamNameNewcastleunited        TeamName = "NEWCASTLEUNITED"
	TeamNameBrentford              TeamName = "BRENTFORD"
	TeamNameLutontown              TeamName = "LUTONTOWN"
	TeamNameBurnley                TeamName = "BURNLEY"
	TeamNameNottinghamforest       TeamName = "NOTTINGHAMFOREST"
	TeamNameBrighton               TeamName = "BRIGHTON"
	TeamNameFulham                 TeamName = "FULHAM"
	TeamNameFreeagent              TeamName = "FREEAGENT"
)

var AllTeamName = []TeamName{
	TeamNameManchesterunited,
	TeamNameArsenal,
	TeamNameChelsea,
	TeamNameManchestercity,
	TeamNameWestham,
	TeamNameWolverhamptonwanderers,
	TeamNameSpuds,
	TeamNameNewcastleunited,
	TeamNameBrentford,
	TeamNameLutontown,
	TeamNameBurnley,
	TeamNameNottinghamforest,
	TeamNameBrighton,
	TeamNameFulham,
	TeamNameFreeagent,
}

func (e TeamName) IsValid() bool {
	switch e {
	case TeamNameManchesterunited, TeamNameArsenal, TeamNameChelsea, TeamNameManchestercity, TeamNameWestham, TeamNameWolverhamptonwanderers, TeamNameSpuds, TeamNameNewcastleunited, TeamNameBrentford, TeamNameLutontown, TeamNameBurnley, TeamNameNottinghamforest, TeamNameBrighton, TeamNameFulham, TeamNameFreeagent:
		return true
	}
	return false
}

func (e TeamName) String() string {
	return string(e)
}

func (e *TeamName) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TeamName(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TeamName", str)
	}
	return nil
}

func (e TeamName) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
